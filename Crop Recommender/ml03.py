# -*- coding: utf-8 -*-
"""ML03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/179Plrni07fyv-CWeS0OA_vkSvbQxiG6C

## Importing Libraries
"""

import numpy as np
import pandas as pd
#import matplotlib.pyplot as plt

"""##Reading Dataset"""

dataset = pd.read_csv('/Users/shreyanshkhaitan/PycharmProjects/ml_stuff/Crop_recommendation.csv')

"""#A few functions"""

dataset.head()

dataset.info()

dataset.isnull().sum()

"""##Training Random Forest Regression Model"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

encoder = LabelEncoder()
dataset['label'] = encoder.fit_transform(dataset['label'])

"""#Seeing dataset after encoding object type values"""

dataset

"""## Split the data into training and test sets"""

X = dataset.drop('label', axis=1) # independent variables
y = dataset['label'] # dependent variable
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

"""# Train the model"""

regressor = RandomForestClassifier(n_estimators=100, random_state=0)
regressor.fit(X_train, y_train)

"""#Accuracy"""

accuracy = regressor.score(X_test, y_test)
print("Accuracy: ", accuracy)

"""##Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
y_pred = regressor.predict(X_test)
cm = confusion_matrix(y_test, y_pred)
print(cm)

"""#Inverse Encoding manually"""

values = { k:v for (k,v) in zip(dataset['label'], encoder.inverse_transform(dataset['label']))} 
print(values)

"""#Getting output"""

predictions = regressor.predict(X_test)
# for i in predictions:
#   print(values[i])

"""##For manual input of values, how to predict?"""


import tkinter as tk


def clear_all():
    input1.delete(0, tk.END)
    input2.delete(0, tk.END)
    input3.delete(0, tk.END)
    input4.delete(0, tk.END)
    input5.delete(0, tk.END)
    input6.delete(0, tk.END)
    input7.delete(0, tk.END)
    output_box.config(state='normal')
    output_box.delete('1.0', tk.END)
    output_box.config(state='disabled')


def generate_output():
    var1 = input1.get()
    var2 = input2.get()
    var3 = input3.get()
    var4 = input4.get()
    var5 = input5.get()
    var6 = input6.get()
    var7 = input7.get()

    pred = regressor.predict([[var1, var2, var3, var4, var5, var6, var7]])
    pred = values[pred[0]]

    output = "Predicted Crop: {}".format(pred)
    output_box.config(state='normal')
    output_box.delete('1.0', tk.END)
    output_box.insert(tk.END, output)
    output_box.config(state='disabled')


root = tk.Tk()
root.title("ML")

input1_label = tk.Label(root, text="ratio of Nitrogen content in soil")
input1_label.grid(row=0, column=0)

input1 = tk.Entry(root)
input1.grid(row=0, column=1)

input2_label = tk.Label(root, text="ratio of Phosphorous content in soil")
input2_label.grid(row=1, column=0)

input2 = tk.Entry(root)
input2.grid(row=1, column=1)

input3_label = tk.Label(root, text=" ratio of Potassium content in soil")
input3_label.grid(row=2, column=0)

input3 = tk.Entry(root)
input3.grid(row=2, column=1)

input4_label = tk.Label(root, text="temperature in degree Celsius")
input4_label.grid(row=3, column=0)

input4 = tk.Entry(root)
input4.grid(row=3, column=1)

input5_label = tk.Label(root, text=" relative humidity in %")
input5_label.grid(row=4, column=0)

input5 = tk.Entry(root)
input5.grid(row=4, column=1)

input6_label = tk.Label(root, text="ph value of the soil")
input6_label.grid(row=5, column=0)

input6 = tk.Entry(root)
input6.grid(row=5, column=1)

input7_label = tk.Label(root, text="rainfall in mm")
input7_label.grid(row=6, column=0)

input7 = tk.Entry(root)
input7.grid(row=6, column=1)

clear_button = tk.Button(root, text="Clear All", command=clear_all)
clear_button.grid(row=7, column=0, sticky='W', pady=4)

enter_button = tk.Button(root, text="Enter", command=generate_output)
enter_button.grid(row=7, column=1, sticky='E', pady=4)

output_label = tk.Label(root, text="Output:")
output_label.grid(row=8, column=0, sticky='W')

output_box = tk.Text(root, height=10, width=50, state='disabled')
output_box.grid(row=9, column=0, columnspan=2)

root.mainloop()